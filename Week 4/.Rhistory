plot(CPI_diff)
pacf(CPI)
acf(CPI)
pacf(CPI)
plot(CPI)
CPI_diff = diff(log(CPI))
plot(CPI_diff)
plot(CPI)
CPI_diff = diff(CPI)
plot(CPI_diff)
t = seq(1950, 2018, length = length(CPI))
y1 = lm(CPI~t)
t = seq(1950, 2018, length = length(CPI))
y1 = lm(CPI~t)
summary(y1)
t = seq(1950, 2018, length = length(CPI))
y1 = lm(CPI~t)
summary(y1)
y2 = lm(CPI~t+I(t^2))
summary(y2)
y3=lm(log(CPI) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
t = seq(1950, 2018, length = length(CPI))
y1 = lm(CPI~t)
summary(y1)
y2 = lm(CPI~t+I(t^2))
summary(y2)
y3=lm(log(CPI) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI ~ log(t))
summary(y5)
fit2=tslm(y1 ~ season)
install.packages("forecast")
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
fit2=tslm(y1 ~ season)
t = seq(1950, 2018, length = length(CPI))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
attach(data)
CPI = ts(CUUR0000SA0R, start = 1950, freq = 12)
plot(CPI)
CPI_diff = diff(CPI)
plot(CPI_diff)
pacf(CPI)
t = seq(1950, 2018, length = length(CPI))
y1 = lm(CPI~t)
summary(y1)
y2 = lm(CPI~t+I(t^2))
summary(y2)
y3=lm(log(CPI) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI ~ log(t))
summary(y5)
fit2=tslm(y1 ~ season)
fit2=tslm(CPI ~ season)
summary(fit2)
plot(CPI,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
lines(fit2$fitted.values, col="red")
plot(fits2, main = "Scatterplot of seasonality")
fit2=tslm(CPI ~ season)
summary(fit2)
plot(fits2, main = "Scatterplot of seasonality")
plot(fit2, main = "Scatterplot of seasonality")
lines(fit2$fitted.values, col="red")
plot(fit2)
#lines(fit2$fitted.values, col="red")
plot(fit2$fitted.values)
fit2=tslm(CPI ~ season)
fit_trend=tslm(CPI ~ season)
summary(fit_trend)
plot(fit_trend$fitted.values)
#lines(fit2$fitted.values, col="red")
fit_full = tslm(CPI~trend + season)
plot(fit_full$residuals, fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
fit_full = tslm(CPI~trend + season)
plot(fit_full$fitted.values, fit_full$residuals , main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
fit_full = tslm(CPI~trend + season)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
fit_full = tslm(CPI~trend + season)
plot(fit_full)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
summary(fit_full)
fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.5)
tn=data.frame(t=seq(1950,2020))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020, length = length()))
tn=data.frame(t=seq(2018,2020))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=predict(tslm(CPI~trend + season), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(tslm(CPI~trend + season),tn, level =0.95, interval="prediction")
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
fit_full = tslm(CPI~trend + season, start = 1950, freq = 12)
plot(fit_full$fitted.values)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
summary(fit_full)
tn=data.frame(t=seq(2018,2020))
pred=predict(tslm(CPI~trend + season), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(tslm(CPI~trend + season),tn, level =0.95, interval="prediction")
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
length(fit_full)
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn, se.fit = TRUE)
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95, interval="prediction")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
pred.plim
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim,ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim[1],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim[1:3],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim,ylab="y",xlab="Time")
pred.plim
pred.plim[1]
pred.plim[2]
pred.plim[3]
pred.plim[4]
pred.plim[5]
pred.plim[6]
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim[6],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim[6],ylab="y",xlab="Time")
plot(forecast(fit_full,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Date: 04/20/2015
# Comment(s): R code example for fitting/forecasting a seasonality to ts data.
# Data File(s): beer.csv, and housing.dat
#***********************************************
# Variable Definitions
# beer = monthly beer production in Australia from Jan 1956 - Aug 1995
# house = monthly housing starts from 1946 to 1993
#************************************************
# Set your 'working directory' to the folder where all the data and respective codes are located.
#setwd("/Users/DrDrR4/Documents/Courses/2015/Spring/Econ144/R_Codes")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(RColorBrewer)
library(plotrix)
library(nlstools)
# Basic Seasonality Example using 'tslm'
y =ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
fit1=tslm(y ~ trend )
fit2=tslm(y ~ season)
fit3=tslm(y ~ trend+ season)
quartz()
par(mfrow=c(3,1))
plot(y,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(y,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(y,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# Read in the beer data into a data file
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
# Lets look at the beer data once again:
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
lbeer<-log(beer)
# Compare 3 different fit models:
fit1=tslm(lbeer ~ trend)
fit2=tslm(lbeer ~ season)
fit3=tslm(lbeer ~ trend + season)
quartz()
par(mfrow=c(3,1))
plot(lbeer,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
# Compute forecasts based on the 3 fit models:
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=60),main="Model 1: Forecast Trend")
lines(fit1$fitted.values, col="red")
plot(forecast(fit2,h=60),main="Model 2: Forecast Seasonality")
lines(fit2$fitted.values, col="red")
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# The forecast above can be improved considerably via 'ets'
fit=ets(lbeer)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
#Plot the seasonal factors:
quartz()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#--------Book Example: Housing Starts----------------
house<-read.table("housing.dat")
housets<-ts(house[,1],start=1946,freq=12)
t<-seq(1946,1993.12,length=length(housets))
quartz()
plot(housets)
quartz()
plot(housets[200:256],type="l") #zoom in
# Seasonal Decomposition of Time Series by Loess
quartz()
plot(stl(housets,s.window="periodic"))
forecast(housets)
summary(forecast(housets))
fit1=tslm(housets ~ trend + season+0)
fit2=tslm(housets ~ trend+0)
fit3=tslm(housets ~ season)
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(fit2,h=24),main="Model 2: Forecast Trend Only")
lines(fit2$fitted.values,col="red")
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
#Plot the seasonal factors:
quartz()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
# We can improve the forecast using ets
quartz()
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
fit=ets(housets)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95),h=12))
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
windows()
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
windows()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Date: 04/20/2015
# Comment(s): R code example for fitting/forecasting a seasonality to ts data.
# Data File(s): beer.csv, and housing.dat
#***********************************************
# Variable Definitions
# beer = monthly beer production in Australia from Jan 1956 - Aug 1995
# house = monthly housing starts from 1946 to 1993
#************************************************
# Set your 'working directory' to the folder where all the data and respective codes are located.
setwd("/Users/Lenovo/Desktop/Econ 144/Week 4")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(RColorBrewer)
library(plotrix)
library(nlstools)
# Basic Seasonality Example using 'tslm'
y =ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
fit1=tslm(y ~ trend )
fit2=tslm(y ~ season)
fit3=tslm(y ~ trend+ season)
windows()
par(mfrow=c(3,1))
plot(y,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(y,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(y,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# Read in the beer data into a data file
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
# Lets look at the beer data once again:
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
lbeer<-log(beer)
# Compare 3 different fit models:
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
# Compute forecasts based on the 3 fit models:
windows()
par(mfrow=c(3,1))
plot(forecast(fit1,h=60),main="Model 1: Forecast Trend")
lines(fit1$fitted.values, col="red")
plot(forecast(fit2,h=60),main="Model 2: Forecast Seasonality")
lines(fit2$fitted.values, col="red")
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# The forecast above can be improved considerably via 'ets'
fit=ets(lbeer)
windows()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
#Plot the seasonal factors:
windows()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#--------Book Example: Housing Starts----------------
house<-read.table("housing.dat")
housets<-ts(house[,1],start=1946,freq=12)
t<-seq(1946,1993.12,length=length(housets))
windows()
plot(housets)
windows()
plot(housets[200:256],type="l") #zoom in
# Seasonal Decomposition of Time Series by Loess
windows()
plot(stl(housets,s.window="periodic"))
forecast(housets)
summary(forecast(housets))
fit1=tslm(housets ~ trend + season+0)
fit2=tslm(housets ~ trend+0)
fit3=tslm(housets ~ season)
windows()
par(mfrow=c(3,1))
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(fit2,h=24),main="Model 2: Forecast Trend Only")
lines(fit2$fitted.values,col="red")
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
#Plot the seasonal factors:
windows()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
# We can improve the forecast using ets
windows()
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
fit=ets(housets)
windows()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95),h=12))
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
fit=ets(lbeer)
windows()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
fit=ets(lbeer)
windows()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
plot(fit)
plot(fit)
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(housets))
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
plot(forecast(fit,level=c(50,80,95),h=12))
