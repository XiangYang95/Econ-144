knitr::opts_chunk$set(echo = TRUE)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
#Obtain the data, clean it and construct the time series for the CPI
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
colnames(data)[2] = "CPI"
attach(data)
CPI_ts = ts(CPI, start = 1950, freq = 12)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = log(diff(CPI_ts))
plot(CPI_ts_diff)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
plot(y3$fitted.values)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(m4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
plot(predict(y4, list(x = ds$x))
dg
plot(ds$x, predict(y4, list(x = ds$x))
windows()
predict(y4, list(x = ds$x)
fgh
predict(y4, list(x = ds$x))
plot(predict(y4, list(x = ds$x)))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
title(main = "Linear-Log")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
title(main = "Linear-Log")
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(ds$x, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear model",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Quadratic model",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Log-linear model",
pch = 19, col = "navyblue")
plot(resid(y4), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Exponential model",
pch = 19, col = "navyblue")
plot(resid(y5), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear-log model",
pch = 19, col = "navyblue")
truehist(resid(y1), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
summary(y1)
windows()
summary(y2)
summary(y1)
summary(y2)
summary(y3)
summary(y4)
summary(y5)
plot(y3$fitted.values)
matplot(t, cbind(550*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(550*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(100*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(75*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(40*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season, start = 1950, freq = 12)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Producing the summary of the regression
summary(fit_full)
knitr::opts_chunk$set(echo = TRUE)
#downloading all the libraries and setting the directory
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#Obtain the data, clean it and construct the time series for the CPI
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
colnames(data)[2] = "CPI"
attach(data)
CPI_ts = ts(CPI, start = 1950, freq = 12)
#Plotting both the time series of the CPI and it's difference of the log
plot(CPI_ts, main = "Plot of time series of CPI values", ylab = "CPI")
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff, main = "Plot of time series of CPI percentage change", ylab = "CPI percentage change")
#Plotting the ACF and the PACF of the time series
acf(CPI_ts)
pacf(CPI)
#we regress time series of the CPI with a linear model and nonlinear models such as quadratic, logatithmatic, exponential, log-linear
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
#plotting the graphs of the time series values with the regression fitted values for all of the models
matplot(t, cbind(y1$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y2$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y3$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Exponential model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y5$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
#Plotting the scatterplot of the residuals of all the models
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear model",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Quadratic model",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Log-linear model",
pch = 19, col = "navyblue")
plot(resid(y4), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Exponential model",
pch = 19, col = "navyblue")
plot(resid(y5), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear-log model",
pch = 19, col = "navyblue")
#Plotting the histogram of the residuals of all the models
truehist(resid(y1), main = "Linear", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Quadratic", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Log-linear", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Exponential", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Linear-log", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
#Displaying the summary of the regression for each model
summary(y1)
summary(y2)
summary(y3)
summary(y4)
summary(y5)
#Calculating the AIC and the BIC of the models
AIC(y1,y2,y3,y4,y5)
BIC(y1,y2,y3,y4,y5)
#Plotting the fitted values, Confidence and Prediction intervals for 60 periods ahead, i.e predicting for the years 2018-2023.
time <- data.frame(t = seq(2018,2023))
pred <- predict(lm(CPI~t), time, se.fit = TRUE)
pred_interval <- predict(lm(log(CPI)~t), time, level = .95, interval = "prediction")
conf_interval <- predict(lm(log(CPI)~t), time, level = .95, interval = "confidence")
matplot(time$t, cbind(conf_interval, pred_interval[,-1]), lty = c(1,1,1,3,3),col = c("black", "blue", "blue", "red", "red"), type = "l", lwd = 2, ylab = "Predicted CPI", xlab = "Time", main = "Confidence and Prediction Intervals")
legend("topleft", legend = c("Confidence Interval", "Prediction Interval", "Fit"), col = c("red", "blue", "black"), lty = c(2,1,1), cex = .8)
#Run a time series regression on the season and show the results
fit_season=tslm(CPI_ts ~ season)
summary(fit_season)
#Plotting the season factors
plot(fit_season$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Producing the summary of the regression
summary(fit_full)
#Plotting the forecast of the data using the full model for 60 periods ahead
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
