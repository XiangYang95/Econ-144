knitr::opts_chunk$set(echo = TRUE)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
#Obtain the data, clean it and construct the time series for the CPI
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
colnames(data)[2] = "CPI"
attach(data)
CPI_ts = ts(CPI, start = 1950, freq = 12)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = log(diff(CPI_ts))
plot(CPI_ts_diff)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
plot(y3$fitted.values)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(m4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
plot(predict(y4, list(x = ds$x))
dg
plot(ds$x, predict(y4, list(x = ds$x))
windows()
predict(y4, list(x = ds$x)
fgh
predict(y4, list(x = ds$x))
plot(predict(y4, list(x = ds$x)))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
title(main = "Linear-Log")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
title(main = "Linear-Log")
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values", col = c("red","black"))
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(ds$x, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-Log")
matplot(t, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(ds$x, cbind(y4$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
summary(y1)
y2 = lm(CPI_ts~t+I(t^2))
summary(y2)
y3=lm(log(CPI_ts) ~ t)
summary(y3)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
summary(y4)
y5=lm(CPI_ts ~ log(t))
summary(y5)
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Residuals v. Fitted Values",
pch = 19, col = "navyblue")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear model",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Quadratic model",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Log-linear model",
pch = 19, col = "navyblue")
plot(resid(y4), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Exponential model",
pch = 19, col = "navyblue")
plot(resid(y5), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear-log model",
pch = 19, col = "navyblue")
truehist(resid(y1), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
summary(y1)
windows()
summary(y2)
summary(y1)
summary(y2)
summary(y3)
summary(y4)
summary(y5)
plot(y3$fitted.values)
matplot(t, cbind(550*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(550*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(100*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(75*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(40*y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season, start = 1950, freq = 12)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Producing the summary of the regression
summary(fit_full)
