load("C:/Users/Lenovo/Desktop/cocaine (1).rda")
View(cocaine)
View(cocaine)
practice = cocaine
v = c()
for(i in 1:10000){
a = sample(c(1,2,3,4,5,6),replace = TRUE)
v[i] = a
}
warning()
v
sum(v)
v = c()
noofthree = 0
for(i in 1:10000){
a = sample(c(1,2,3,4,5,6),replace = TRUE)
v[i] = a
if(a == 3){
noofthree = noofthree+1
}
}
prob = noofthree/length(v)
prob
1/64
1/6
summary(practice)
sum = summary(practice)
sum[1]
sum[,1]
sum[1,]
sum[1,2]
plot(practice$price,practice$qual)
a = lm(price~qual+quant,practice,if(price>20))
a = lm(price~qual+quant,practice)
summary(a)
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <-- 5+7
x <- 5+7
x
0
y <- x-3
y
z <- c(1.1,9,3.14)
?c()
?c
z
z <- c(z,555,z)
z <- c(z, 555, z)
z <- c( z , 555 , z )
c(z,555,z)
z * 2+ 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2+ 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
arg(list.files())
arg()
args()
args(list.files())
args(list.files)
old.dir <- dir()
old.dir <- getwd()
testdir <- dir.create()
dir.create()
dir.create(testdir)
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
getwd()
list.files()
file.exists(mytest.R)
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
mytest2.R <- file.rename("mytest.R")
args(file.rename)
file.rename("mytest.R","mytest2.R")
play()
file.info("mytest2.R")$mode
file.info("mytest2.R")$isdir
nxt()
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
play()
?file.path
?dir.create
mkdir -p
?mkdir
nxt()
dir.create(file.path("testdir3"),recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd("old.dir")
setwd(old.dir)
load("~/.RData")
swirl()
swirl
library("swirl")
ls()
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
play()
?along.with
?along
?seq
nxt()
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
use usa_00008.csv
help use
install.packages(available.packages()[,1])
library(viridis)
setwd("C:\Users\Lenovo\Desktop\Econ 144\Homework\Hw 1")
source("C:\Users\Lenovo\Desktop\Econ 144\Homework\Hw 1\full_regression_exmaple.R")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
# Read in the data into a data file and attach names:
z=read.table('cars.dat',header=T)
attach(z)
install.packages(available.packages()[,1])
install.packages(available.packages()[, 1])
q()
q()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
rdpi_pctchg_lag = c(NA, head(rdpi_pctchg,-1))
rdpi_pctchg_lag = c(NA,head(rdpi_pctchg,-1))
```{r}
```{r}
# Set your 'working directory' to the folder where all the data and respective codes are located.
setwd("/Users/Lenovo/Desktop/Econ 144/Week 4")
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Date: 04/20/2015
# Comment(s): R code example for fitting/forecasting a seasonality to ts data.
# Data File(s): beer.csv, and housing.dat
#***********************************************
# Variable Definitions
# beer = monthly beer production in Australia from Jan 1956 - Aug 1995
# house = monthly housing starts from 1946 to 1993
#************************************************
# Set your 'working directory' to the folder where all the data and respective codes are located.
setwd("/Users/Lenovo/Desktop/Econ 144/Week 4")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(RColorBrewer)
library(plotrix)
library(nlstools)
# Basic Seasonality Example using 'tslm'
y =ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
fit1=tslm(y ~ trend )
fit2=tslm(y ~ season)
fit3=tslm(y ~ trend+ season)
quartz()
par(mfrow=c(3,1))
plot(y,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(y,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(y,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# Read in the beer data into a data file
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
# Lets look at the beer data once again:
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
lbeer<-log(beer)
# Compare 3 different fit models:
fit1=tslm(lbeer ~ trend)
fit2=tslm(lbeer ~ season)
fit3=tslm(lbeer ~ trend + season)
quartz()
par(mfrow=c(3,1))
plot(lbeer,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
# Compute forecasts based on the 3 fit models:
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=60),main="Model 1: Forecast Trend")
lines(fit1$fitted.values, col="red")
plot(forecast(fit2,h=60),main="Model 2: Forecast Seasonality")
lines(fit2$fitted.values, col="red")
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# The forecast above can be improved considerably via 'ets'
fit=ets(lbeer)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
#Plot the seasonal factors:
quartz()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#--------Book Example: Housing Starts----------------
house<-read.table("housing.dat")
housets<-ts(house[,1],start=1946,freq=12)
t<-seq(1946,1993.12,length=length(housets))
quartz()
plot(housets)
quartz()
plot(housets[200:256],type="l") #zoom in
# Seasonal Decomposition of Time Series by Loess
quartz()
plot(stl(housets,s.window="periodic"))
forecast(housets)
summary(forecast(housets))
fit1=tslm(housets ~ trend + season+0)
fit2=tslm(housets ~ trend+0)
fit3=tslm(housets ~ season)
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(fit2,h=24),main="Model 2: Forecast Trend Only")
lines(fit2$fitted.values,col="red")
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
#Plot the seasonal factors:
quartz()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
# We can improve the forecast using ets
quartz()
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
fit=ets(housets)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95),h=12))
fit1=tslm(lbeer ~ trend)
fit2=tslm(lbeer ~ season)
fit3=tslm(lbeer ~ trend + season)
windows()
par(mfrow=c(3,1))
plot(lbeer,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Date: 04/07/2017
# Comment(s): R code example for fitting/forecasting a trend to ts data.
# Data File(s): labordata.dat
#***********************************************
# Variable Definitions
# male = labor force male participate rate = y (response variable)
# female = labor force female participate rate = y (response variable)
# t =  time (monthly observations from 1948-1991)
#************************************************
# Set your 'working directory' to the folder where all the data and respective codes are located.
setwd("/Users/Lenovo/Desktop/Econ 144/Week 2")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#require(astsa)
library(xtable)
library(stats)
#NOTE: to add recession bands:
# Example: Presidents approval rating
#plot(presidents, type='n', ylab="Presidents approval rating")
#nberShade()
#lines(presidents)
# Read in the data into a data file and attach names:
z=read.table("labordata.dat")
names(z)= c("male","female","total")
attach(z)
# Convert data to time series format:
male_ts<-ts(male,start=1948,freq=12)
t<-seq(1948, 1991,length=length(male_ts))
#note: you can use head() to show the first few rows of data,i.e male_ts
#-------------[1] TREND FITTING--------------
#Linear Fit
m1=lm(male_ts~t)
windows()
par(mfrow=c(2,1))
plot(male_ts,ylab="Participation Rate (Male)", xlab="Time", lwd=2, col='skyblue3',ylim=c(75,84), xlim=c(1968,1995))
#The next commands adds the U.S. recession bands
nberShade()
lines(t,m1$fit,col="red3",lwd=2)
plot(t,m1$res, ylab="Residuals",type='l',xlab="Time")
#Quadratic Fit
m2=lm(male_ts~t+I(t^2))
windows()
par(mfrow=c(2,1))
plot(male_ts,ylab="Participation Rate (Male)", xlab="Time", lwd=2, col='skyblue3',ylim=c(75,84), xlim=c(1968,1995))
lines(t,m2$fit,col="red3",lwd=2)
plot(t,m2$res, ylab="Residuals",type='l',xlab="Time")
#Log-Linear Fit
m3=lm(log(male_ts) ~ t)
windows()
par(mfrow=c(2,1))
plot(log(male_ts),ylab="Participation Rate (Male)", xlab="Time", lwd=2, col='skyblue3', xlim=c(1968,1995))
lines(t,m3$fit,col="red3",lwd=2)
plot(t,m3$res, ylab="Residuals",type='l',xlab="Time")
#Exponential Fit
ds=data.frame(x=t, y=male_ts)
par(mfrow=c(2,1))
plot(male_ts,ylab="Participation Rate (Male)", xlab="Time", lwd=2, col='skyblue3',ylim=c(75,84), xlim=c(1968,1995))
#lines(t,m1$fit,col="green",lwd=2)
#using a nonlinear square
m4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
lines(ds$x, predict(m4, list(x = ds$x)),col="red3",lwd=2)
plot(t,residuals(m4), ylab="Residuals",type='l',xlab="Time")
summary(m4)
#-------------[2] MODEL SELECTION--------------
# Compare models using AIC and BIC
AIC(m1,m2,m3,m4)
BIC(m1,m2,m3,m4)
windows()
#stl-seasonality, trend, error
plot(stl(male_ts,s.window="periodic"))
#-------------[3] TREND FORECASTING--------------
tn=data.frame(t=seq(1992,1999))
pred=predict(lm(male_ts ~ t), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(male_ts ~ t),tn, level =0.95, interval="prediction")
pred.clim = predict(lm(male_ts ~ t), tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,1,1,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time")
#dev.print(device=postscript,"tsfig.eps",width=7,height=7, horizontal=FALSE)
#dev.off()
#-------------[4] Holt-Winters Filter--------------
hwfit<-HoltWinters(male_ts)
windows()
hwpred <- predict(hwfit, 60, prediction.interval = TRUE,level=0.5)
plot(hwfit,hwpred,ylab="Participation Rate (Male)", xlab="Time",xlim=c(1948,1999))
#lines(predict(hwfit,n.ahead=60),lwd=1.5, col='blue')
#plot(hwfit,ylab="Participation Rate (Male)", xlab="Time", lwd=1, col='black',xlim=c(1948,1999))
#lines(predict(hwfit,n.ahead=60),lwd=1.5, col='blue')
tn=data.frame(t=seq(1992,1999))
pred=predict(lm(male_ts ~ t), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(male_ts ~ t),tn, level =0.95, interval="prediction")
pred.clim = predict(lm(male_ts ~ t), tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,1,1,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time")
tn=data.frame(t=seq(1992,1999))
pred=predict(lm(male_ts ~ t), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(male_ts ~ t),tn, level =0.95, interval="prediction")
pred.clim = predict(lm(male_ts ~ t), tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,1,1,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time")
windows()
tn=data.frame(t=seq(1992,1999))
pred=predict(lm(male_ts ~ t), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(male_ts ~ t),tn, level =0.95, interval="prediction")
pred.clim = predict(lm(male_ts ~ t), tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,1,1,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time")
size(pred.plim)
length(pred.plim)
length(tn$t)
pred.plim
