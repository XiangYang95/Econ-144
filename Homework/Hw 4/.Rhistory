acf(tcpi_perctchg, main = "ACF of the percentage change of transportation CPI")
pacf(tcpi_perctchg,  main = "PACF of the percentage change of transportation CPI")
acf(tinf_perctchg, main = "ACF of the percentage change of transportation inflation")
pacf(tinf_perctchg,  main = "PACF of the percentage change of transportation inflation")
View(data)
rm(list = ls(all=TRUE))
data = read.csv("7.7.csv")
names(data)[c(3,5)] = c("food.inflation", "Gas.inflation")
attach(data)
finf_ts = ts(food.inflation, start = 1957, freq = 1)
finf_ts = finf_ts [complete.cases(finf_ts )]
ginf_ts = ts(Gas.inflation, start = 1957, freq = 1)
ginf_ts = ginf_ts [complete.cases(ginf_ts)]
acf(finf_ts, main = "ACF of the food inflation")
pacf(finf_ts, main = "PACF of the food inflation")
acf(ginf_ts, main = "ACF of the Gas inflation")
pacf(ginf_ts, main = "PACF of the Gas inflation")
help("rollmean")
new_ginf_ts = rollmean(ginf_ts, 3)
acf(new_ginf_ts)
pacf(new_ginf_ts)
finf_ar3 = Arima(finf_ts, order = c(3,0,0), method = "ML")
ginf_ar1 = Arima(new_ginf_ts, order = c(2,0,0), method = "ML")
acf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
pacf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
acf(ginf_ar1 $residuals[complete.cases(ginf_ar1$residuals)])
pacf(ginf_ar1 $residuals[complete.cases(ginf_ar1$residuals)])
finf_ar3 = Arima(finf_ts, order = c(3,0,0), method = "ML")
ginf_ar2 = Arima(new_ginf_ts, order = c(2,0,0), method = "ML")
acf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
pacf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
acf(ginf_ar2 $residuals[complete.cases(ginf_ar2$residuals)])
pacf(ginf_ar2 $residuals[complete.cases(ginf_ar2$residuals)])
help(forecast)
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfCPI = food.CPI[ind]
lastelfInf = food.inflation[ind]
lastelgCPI = Gas.CPI[ind]
lastelgInf = Gas.inflation[ind]
finf_ar3.pred = forecast(finf_ar3,h=3)
print("For food inflation AR(3,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(finf_ar3.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(lastelfInf -finf_ar3.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (finf_ar3.pred$upper[i,2] - finf_ar3.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
ginf_ar2.pred = forecast(ginf_ar2,h=3)
print("For gas inflation AR(1,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(ginf_ar1.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(lastelgInf -ginf_ar1.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (ginf_ar1.pred$upper[i,2] - ginf_ar1.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfCPI = food.CPI[ind]
lastelfInf = food.inflation[ind]
lastelgCPI = Gas.CPI[ind]
lastelgInf = Gas.inflation[ind]
finf_ar3.pred = forecast(finf_ar3,h=3)
print("For food inflation AR(3,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(finf_ar3.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(lastelfInf -finf_ar3.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (finf_ar3.pred$upper[i,2] - finf_ar3.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
ginf_ar2.pred = forecast(ginf_ar2,h=3)
print("For gas inflation AR(1,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(ginf_ar2.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(lastelgInf -ginf_ar2.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (ginf_ar2.pred$upper[i,2] - ginf_ar2.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
finf_ar3.pred$residuals
finf_ar3.pred
e = rnorm(3)
finf_ar3
finf = vector()
finf[1] = food.inflation[end]
finf[1] = food.inflation[length(food.inflation)]
finf[1] = food.inflation[length(food.inflation)-1]
finf[2] = food.inflation[length(food.inflation)]
finf[1] = food.inflation[length(food.inflation)-2]
finf[2] = food.inflation[length(food.inflation)-1]
finf[3] = food.inflation[length(food.inflation)]
finf[4] = finf_ar3$mean + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1]
finf_ar3$coef
finf_ar3$coef[1]
finf_ar3$coef[1]*3
finf[4] = finf_ar3$mean + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1]
finf_ar3$coef[2]
finf_ar3$coef[3]
finf[1]
finf[2]
finf_ar3$coef[3]*finf[1]
finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1]
finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1]
finf_ar3$mean
finf_ar3
finf_ar3$coef[4]
finf[4] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1]
finf[4] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1] + e[1]
finf[5] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[4] + finf_ar3$coef[2]*finf[3] +finf_ar3$coef[3]*finf[2] + e[2]
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfInf = food.inflation[ind]
lastelgInf = Gas.inflation[ind]
#for food inflation, create a list of realized future values
e = rnorm(3)
finf = vector()
finf[1] = food.inflation[length(food.inflation)-2]
finf[2] = food.inflation[length(food.inflation)-1]
finf[3] = food.inflation[length(food.inflation)]
finf[4] = finf_ar3$mean + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1] + e[1]
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfInf = food.inflation[ind]
lastelgInf = Gas.inflation[ind]
#for food inflation, create a list of realized future values
e = rnorm(3)
finf = vector()
finf[1] = food.inflation[length(food.inflation)-2]
finf[2] = food.inflation[length(food.inflation)-1]
finf[3] = food.inflation[length(food.inflation)]
finf[4] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1] + e[1]
finf[5] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[4] + finf_ar3$coef[2]*finf[3] +finf_ar3$coef[3]*finf[2] + e[2]
finf[6] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[5] + finf_ar3$coef[2]*finf[4] +finf_ar3$coef[3]*finf[3] + e[3]
finf_ar3.pred = forecast(finf_ar3,h=3)
print("For food inflation AR(3,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(finf_ar3.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(finf[3+i] -finf_ar3.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (finf_ar3.pred$upper[i,2] - finf_ar3.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
ginf_ar2.pred = forecast(ginf_ar2,h=3)
print("For gas inflation AR(1,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(ginf_ar2.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(lastelgInf -ginf_ar2.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (ginf_ar2.pred$upper[i,2] - ginf_ar2.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
ginf_ar2$coef[3]
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfInf = food.inflation[ind]
lastelgInf = Gas.inflation[ind]
#for food inflation, create a list of realized future values
e = rnorm(3)
finf = vector()
finf[1] = food.inflation[length(food.inflation)-2]
finf[2] = food.inflation[length(food.inflation)-1]
finf[3] = food.inflation[length(food.inflation)]
finf[4] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1] + e[1]
finf[5] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[4] + finf_ar3$coef[2]*finf[3] +finf_ar3$coef[3]*finf[2] + e[2]
finf[6] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[5] + finf_ar3$coef[2]*finf[4] +finf_ar3$coef[3]*finf[3] + e[3]
finf_ar3.pred = forecast(finf_ar3,h=3)
print("For food inflation AR(3,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(finf_ar3.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(finf[3+i] -finf_ar3.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (finf_ar3.pred$upper[i,2] - finf_ar3.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
#do similarly as the above
ginf = vector()
ginf[1] = Gas.inflation[length(Gas.inflation)-1]
ginf[2] = Gas.inflation[length(Gas.inflation)]
ginf[3] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[2] + ginf_ar2$coef[2]*ginf[1] + e[1]
ginf[4] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[3] + ginf_ar2$coef[2]*ginf[2] + e[2]
ginf[5] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[4] + ginf_ar2$coef[2]*ginf[3]+ e[3]
ginf_ar2.pred = forecast(ginf_ar2,h=3)
print("For gas inflation AR(1,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(ginf_ar2.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(ginf[2+i] -ginf_ar2.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (ginf_ar2.pred$upper[i,2] - ginf_ar2.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
acf(hinf_ts, main = "ACF of housing inflation")
hinf_ts = ts(housing.inflation, start = 1976, freq = 1)
tinf_ts = ts(transportation.inflation, start = 1976, freq = 1)
acf(hinf_ts, main = "ACF of housing inflation")
acf(hinf_ts[complete.cases(hinf_ts)], main = "ACF of housing inflation")
pacf(hinf_ts[complete.cases(hinf_ts)],  main = "PACF of housing inflation")
acf(tinf_ts[complete.cases(tinf_ts)], main = "ACF of the transportation inflation")
pacf(tinf_ts[complete.cases(tinf_ts)],  main = "PACF of the transportation inflation")
ar1 = arima(ApplPrice_ts, order = c(1,1,0))
rm(list = ls(all = TRUE))
data = read.csv("6.10.csv")
names(data) = c("date", "ApplPrice", "return")
attach(data)
ApplPrice_ts = ts(ApplPrice, start = 2007+(10/12), end = 2012 + (7/12), freq = 252)
return_ts = ts(return, start = 2007+(10/12), end = 2012 + (7/12), freq = 252)
plot(ApplPrice_ts, type = "l", main = "Plot of Apple Price", xlab = "Year", ylab = "Price")
plot(return_ts, type = "l", main = "Plot of Apple return", xlab = "Year", ylab = "Return")
acf(ApplPrice_ts, main = "ACF of Apple Price", type = "correlation")
pacf(ApplPrice_ts, main = "pACF of Apple Price")
acf(return_ts, main = "ACF of Apple return")
pacf(return_ts, main = "PACF of Apple return")
ar1 = arima(ApplPrice_ts, order = c(1,1,0))
acf(ar1$residuals)
pacf(ar1$residuals)
help("Box.test")
Box.test(ar1$residuals)
ar1 = arima(ApplPrice_ts, order = c(1,1,0))
acf(ar1$residuals)
pacf(ar1$residuals)
Box.test(ar1$residuals)
ar1 = arima(ApplPrice_ts, order = c(1,1,0))
acf(ar1$residuals, main = "ACF of the residuals")
pacf(ar1$residuals, main = "PACF of the residuals")
Box.test(ar1$residuals)
ar1.pred = forcast(ar1, h = 10)
refresh
ar1.pred = forecast(ar1, h = 10)
ar1 = Arima(ApplPrice_ts, order = c(1,1,0))
acf(ar1$residuals, main = "ACF of the residuals")
pacf(ar1$residuals, main = "PACF of the residuals")
Box.test(ar1$residuals)
ar1.pred = forecast(ar1, h = 10)
ar1.pred$mean
ar1.pred = forecast(ar1, h = 10)
print("The forecast for the 10-step ahead is as follows:")
print(ar1.pred$mean)
ar1.pred$mean
ar1.pred = forecast(ar1, h = 10)
print("The point forecast for the 10-step ahead is as follows:")
print(ar1.pred$mean)
print (cat('\n'))
print(paste("While the value at the last observation is", toString(ar1$fitted[length(ar1$fitted)]))
ar1.pred = forecast(ar1, h = 10)
print("The point forecast for the 10-step ahead is as follows:")
print(ar1.pred$mean)
print (cat('\n'))
print(paste("While the value at the last observation is", toString(ar1$fitted[length(ar1$fitted)])))
ar1.pred = forecast(ar1, h = 10)
print("The point forecast for the 10-step ahead is as follows:")
print(ar1.pred$mean)
print(paste("While the value at the last observation is", toString(ar1$fitted[length(ar1$fitted)])))
ar1.pred
ar1.pred$fitted
ar1.pred$fitted[length(ar1$fitted)-5:length(ar1$fitted)]
ar1.pred$fitted[length(ar1.pred $fitted)-5:length(ar1.pred $fitted)]
ar1.pred$fitted[length(ar1.pred$fitted)]
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 3")
rm(list=ls(all=TRUE))
library("quantmod")
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(xtable)
# New libraries added:
library(stats)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(fpp)
rm(list = ls(all=TRUE))
ARMAacf(ma = c(-2, 1.35), lag.max = 10)
for (i in 1:10){
x = e = rnorm(100)
x[2] = 0.7 -0.2*e[1] + e[2]
for (t in 3:100) x[t] = 0.7-0.2*e[t-1]+1.35*e[t-2] + e[t]
acf(x, lag.max = 10)
}
rm(list = ls(all = TRUE))
data = read.csv("6.10.csv")
names(data) = c("date", "ApplPrice", "return")
attach(data)
ApplPrice_ts = ts(ApplPrice, start = 2007+(10/12), end = 2012 + (7/12), freq = 252)
return_ts = ts(return, start = 2007+(10/12), end = 2012 + (7/12), freq = 252)
plot(ApplPrice_ts, type = "l", main = "Plot of Apple Price", xlab = "Year", ylab = "Price")
plot(return_ts, type = "l", main = "Plot of Apple return", xlab = "Year", ylab = "Return")
acf(ApplPrice_ts, main = "ACF of Apple Price", type = "correlation")
pacf(ApplPrice_ts, main = "pACF of Apple Price")
acf(return_ts, main = "ACF of Apple return")
pacf(return_ts, main = "PACF of Apple return")
ar1 = Arima(ApplPrice_ts, order = c(1,1,0))
acf(ar1$residuals, main = "ACF of the residuals")
pacf(ar1$residuals, main = "PACF of the residuals")
Box.test(ar1$residuals)
ar1.pred = forecast(ar1, h = 10)
print("The point forecast for the 10-step ahead is as follows:")
print(ar1.pred$mean)
print(paste("While the value at the last observation is", toString(ar1$fitted[length(ar1$fitted)])))
rm(list = ls(all=TRUE))
data = read.csv("7.2.csv")
names(data) = c('date', 'unemploy_thousands')
attach(data)
unemploy_thousands_ts = ts(unemploy_thousands, start = 1989, freq = 12)
plot(unemploy_thousands_ts, main = "Plot of unemployed in thousands")
unemploy_thousands_ts = ts(unemploy_thousands, start = 1989, frequency = 12)
acf(unemploy_thousands_ts, main = "ACF of number of unemployed in thousands")
pacf(unemploy_thousands_ts, main = "PACF of number of unemployed in thousands")
acf(unemploy_thousands_ts[1:100], main = "ACF of number of unemployed in thousands")
pacf(unemploy_thousands_ts[1:100], main = "PACF of number of unemployed in thousands")
acf(unemploy_thousands_ts[2:200], main = "ACF of number of unemployed in thousands")
pacf(unemploy_thousands_ts[2:200], main = "PACF of number of unemployed in thousands")
acf(unemploy_thousands_ts[183:283], main = "ACF of number of unemployed in thousands")
pacf(unemploy_thousands_ts[183:283], main = "PACF of number of unemployed in thousands")
rm(list = ls(all=TRUE))
data = read.csv("7.6.csv")
names(data)[c(3,5)] = c("housing.inflation", "transportation.inflation")
attach(data)
hinf_ts = ts(housing.inflation, start = 1976, freq = 1)
tinf_ts = ts(transportation.inflation, start = 1976, freq = 1)
acf(hinf_ts[complete.cases(hinf_ts)], main = "ACF of housing inflation")
pacf(hinf_ts[complete.cases(hinf_ts)],  main = "PACF of housing inflation")
acf(tinf_ts[complete.cases(tinf_ts)], main = "ACF of the transportation inflation")
pacf(tinf_ts[complete.cases(tinf_ts)],  main = "PACF of the transportation inflation")
rm(list = ls(all=TRUE))
data = read.csv("7.7.csv")
names(data)[c(3,5)] = c("food.inflation", "Gas.inflation")
attach(data)
finf_ts = ts(food.inflation, start = 1957, freq = 1)
finf_ts = finf_ts [complete.cases(finf_ts )]
ginf_ts = ts(Gas.inflation, start = 1957, freq = 1)
ginf_ts = ginf_ts [complete.cases(ginf_ts)]
acf(finf_ts, main = "ACF of the food inflation")
pacf(finf_ts, main = "PACF of the food inflation")
acf(ginf_ts, main = "ACF of the Gas inflation")
pacf(ginf_ts, main = "PACF of the Gas inflation")
new_ginf_ts = rollmean(ginf_ts, 3)
acf(new_ginf_ts)
pacf(new_ginf_ts)
finf_ar3 = Arima(finf_ts, order = c(3,0,0), method = "ML")
ginf_ar2 = Arima(new_ginf_ts, order = c(2,0,0), method = "ML")
acf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
pacf(finf_ar3$residuals[complete.cases(finf_ar3$residuals)])
acf(ginf_ar2 $residuals[complete.cases(ginf_ar2$residuals)])
pacf(ginf_ar2 $residuals[complete.cases(ginf_ar2$residuals)])
#last element index
ind = length(food.CPI)
#last element for the CPIs and the inflations
lastelfInf = food.inflation[ind]
lastelgInf = Gas.inflation[ind]
#for food inflation, create a list of realized future values
e = rnorm(3)
finf = vector()
finf[1] = food.inflation[length(food.inflation)-2]
finf[2] = food.inflation[length(food.inflation)-1]
finf[3] = food.inflation[length(food.inflation)]
finf[4] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[3] + finf_ar3$coef[2]*finf[2] +finf_ar3$coef[3]*finf[1] + e[1]
finf[5] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[4] + finf_ar3$coef[2]*finf[3] +finf_ar3$coef[3]*finf[2] + e[2]
finf[6] = finf_ar3$coef[4] + finf_ar3$coef[1]*finf[5] + finf_ar3$coef[2]*finf[4] +finf_ar3$coef[3]*finf[3] + e[3]
finf_ar3.pred = forecast(finf_ar3,h=3)
print("For food inflation AR(3,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(finf_ar3.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(finf[3+i] -finf_ar3.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (finf_ar3.pred$upper[i,2] - finf_ar3.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
#do similarly as the above
ginf = vector()
ginf[1] = Gas.inflation[length(Gas.inflation)-1]
ginf[2] = Gas.inflation[length(Gas.inflation)]
ginf[3] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[2] + ginf_ar2$coef[2]*ginf[1] + e[1]
ginf[4] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[3] + ginf_ar2$coef[2]*ginf[2] + e[2]
ginf[5] = ginf_ar2$coef[3] + ginf_ar2$coef[1]*ginf[4] + ginf_ar2$coef[2]*ginf[3]+ e[3]
ginf_ar2.pred = forecast(ginf_ar2,h=3)
print("For gas inflation AR(1,0),")
for (i in 1:3){
print(paste("Point forecast for", toString(i), "step(s) is", toString(ginf_ar2.pred$mean[i])))
print(paste("Forecast error for", toString(i), "step(s) is", toString(ginf[2+i] -ginf_ar2.pred$mean[i])))
#Since the upper bound of 95% confidence interval = point_forecast + 1.96(forecast_variance)
forecast_variance = (ginf_ar2.pred$upper[i,2] - ginf_ar2.pred$mean[i])/1.96
print(paste("Forecast uncertainty for", toString(i), "step(s) is", toString(forecast_variance)))
cat("\n")
}
??tseries
knitr::opts_chunk$set(echo = TRUE)
setwd(/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 4)
setwd("/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 4"")
library(forecast)
library(stats)
library(timeSeries)
library(tseries)
library(dlnm)
setwd("/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 4")
library(forecast)
library(stats)
library(timeSeries)
library(tseries)
library(dlnm)
data = read.delim("w-gs1yr.txt")
rm(ls=list(all=T))
rm(list=ls(all=T))
data = read.delim("w-gs1yr.txt")
View(data)
data = read.delim("w-gs1yr.txt",header = TRUE, sep = 32)
data = read.delim("w-gs1yr.txt",header = TRUE, sep = 032)
??data.delim
data = read.table ("w-gs1yr.txt",header = TRUE)
data = read.table ("w-gs1yr.txt",header = TRUE)
attach(data)
View(data)
View(data)
#create a time series object for the data
ir_ts = ts(rate, start = 1962+(5/365), freq = 52)
#display the plot, acf and pacf
tsdiplay(ir_ts)
??tsdisplay
rm(list=ls(all=T))
setwd("/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 4")
library(forecast)
library(stats)
library(timeSeries)
library(tseries)
data = read.table ("w-gs1yr.txt",header = TRUE)
attach(data)
#create a time series object for the data
ir_ts = ts(rate, start = 1962+(5/365), freq = 52)
#display the plot, acf and pacf
tsdiplay(ir_ts)
#create a time series object for the data
ir_ts = ts(rate, start = 1962+(5/365), freq = 52)
#display the plot, acf and pacf
ggtsdiplay(ir_ts)
#create a time series object for the data
ir_ts = ts(rate, start = 1962+(5/365), freq = 52)
#display the plot, acf and pacf
tsdisplay(ir_ts)
#create a time series object for the data
ir_ts = ts(rate, start = 1962+(5/365), freq = 52)
#display the plot, acf and pacf
tsdisplay(ir_ts, main = "Plot of weekly interest rate and its ACF and PACF")
help arma
help(arma)
help(arima)
arma1 = arima(ir_ts, order = c(2,0,0), seasonal = list(order = c(0,0,3), period = 6))
plot(arma1)
plot(arma1$residuals)
acf(arma1$residuals)
#Constructing the models
arma1 = arima(ir_ts, order = c(2,0,0), seasonal = list(order = c(0,0,3), period = 6))
arma2 = arima(ir_ts, order = c(3,0,0), seasonal = list(order = c(0,0,3), period = 5))
arma3 = arima(ir_ts, order = c(3,0,0), seasonal = list(order = c(0,0,2), period = 6))
#Look at the ACF and the PACF of residuals from the models and run a box test
acf(arma1$residuals, main = "ACF of residual from first model")
pacf(arma1$residuals, main = "PACF of residual from first model")
acf(arma2$residuals, main = "ACF of residual from second model")
pacf(arma2$residuals, main = "PACF of residual from second model")
acf(arma2$residuals, main = "ACF of residual from third model")
pacf(arma2$residuals, main = "PACF of residual from third model")
Box.test(arma1%residuals)
??box.test
adsf
asg
h
#Constructing the models
arma1 = arima(ir_ts, order = c(2,0,0), seasonal = list(order = c(0,0,3), period = 6))
arma2 = arima(ir_ts, order = c(3,0,0), seasonal = list(order = c(0,0,3), period = 5))
arma3 = arima(ir_ts, order = c(3,0,0), seasonal = list(order = c(0,0,2), period = 6))
#Look at the ACF and the PACF of residuals from the models and run a box test
acf(arma1$residuals, main = "ACF of residual from first model")
#Constructing the models
arma1 = arima(ir_ts, order = c(2,0,0), seasonal = list(order = c(0,0,3), period = 6))
