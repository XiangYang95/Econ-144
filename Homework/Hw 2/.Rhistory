summary(y2)
y3 = lm(house_price~hp_lag1+hp_lag2+hp_lag3)
summary(y3)
y4 = lm(house_price~hp_lag1+hp_lag2+hp_lag3+hp_lag4)
summary(y4)
y5 = lm(house_price_ts~hp_lag1k+hp_lag2k)
summary(y5)
knitr::opts_chunk$set(echo = TRUE)
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
#Obtain the data, clean it and construct the time series for the CPI
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
colnames(data)[2] = "CPI"
attach(data)
CPI_ts = ts(CPI, start = 1950, freq = 12)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff)
#Plotting the ACF and the PACF of the time series
acf(CPI_ts)
pacf(CPI)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear model",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Quadratic model",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Log-linear model",
pch = 19, col = "navyblue")
plot(resid(y4), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Exponential model",
pch = 19, col = "navyblue")
plot(resid(y5), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear-log model",
pch = 19, col = "navyblue")
truehist(resid(y1), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
summary(y1)
summary(y2)
summary(y3)
summary(y4)
summary(y5)
#Run a time series regression on the season and show the results
fit_season=tslm(CPI_ts ~ season)
summary(fit_season)
#Plotting the season factors
plot(fit_season$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season, start = 1950, freq = 12)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Producing the summary of the regression
summary(fit_full)
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
knitr::opts_chunk$set(echo = TRUE)
#Plotting the graph with the 95% confidence and prediction intervals
tn=data.frame(t=seq(1992,2002))
pred=predict(lm(female_ts ~ t+I(t^2))), tn, se.fit = TRUE)
#Plotting the graph with the 95% confidence and prediction intervals
tn=data.frame(t=seq(1992,2002))
pred=predict(y2, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(female_ts ~ t),tn, level =0.95, interval="prediction")
#Plotting the graph with the 95% confidence and prediction intervals
tn=data.frame(t=seq(1992,2002))
pred=predict(y2, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(y2,tn, level =0.95, interval="prediction")
pred.clim = predict(y2, tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
#Plotting the graph with the 95% confidence and prediction intervals
tn=data.frame(t=seq(1992,2002))
pred=predict(lm(female_ts~t+I(t^2)), tn, se.fit = TRUE)
#reading in the data and change the names
z=read.table("labordata.dat")
names(z)= c("male","female","total")
attach(z)
# Convert data to time series format:
male_ts<-ts(male,start=1948,freq=12)
female_ts <- ts(female,start=1948,freq=12)
total_ts <- ts(total,start=1948,freq=12)
t<-seq(1948, 1991,length=length(male_ts))
matplot(t, cbind(male_ts, female_ts, total_ts), xlab = "Time", ylab = "Values",  type="l", lwd=2, col = c("black", "blue", "red"))
title(main = "Time series values against time")
legend("topleft", legend=c("Female", "Total", "Male"),
col=c("blue", "red", "black"), cex=0.8, lty = 1)
#Linear Model
y1 = lm(female_ts~t)
matplot(t, cbind(y1$fitted.values, female_ts), xlab = "Time", ylab = "Values",  type="l", lwd=2, col = c("black", "blue"))
title(main = "Linear model")
legend("topleft", legend=c("Regression Fitted Values", "Time Series"),
col=c("black", "blue"), cex=0.8, lty = 1)
#Quadratic Model
y2 = lm(female_ts~t+I(t^2))
matplot(t, cbind(y2$fitted.values, female_ts), xlab = "Time", ylab = "Values",  type="l", lwd=2, col = c("black", "blue"))
title(main = "Quadratic model")
legend("topleft", legend=c("Regression Fitted Values", "Time Series"),
col=c("black", "blue"), cex=0.8, lty = 1)
#Exponential Model
ds=data.frame(x=t, y=female_ts)
#using a nonlinear square
y3=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
matplot(t, cbind(predict(y3, list(x = ds$x)), female_ts), xlab = "Time", ylab = "Values",  type="l", lwd=2, col = c("black", "blue"))
title(main = "Exponential model")
legend("topleft", legend=c("Regression Fitted Values", "Time Series"),
col=c("black", "blue"), cex=0.8, lty = 1)
plot(y1$fitted.values, y1$residuals, main = "Linear:Residual vs Fitted Values", ylab = "Residuals", xlab = "Fitted values")
plot(y2$fitted.values, y2$residuals, main = "Quadratic:Residual vs Fitted Values", ylab = "Residuals", xlab = "Fitted values")
plot(predict(y3, list(x = ds$x)), residuals(y3), main = "Exponential:Residual vs Fitted Values", ylab = "Residuals", xlab = "Fitted values")
#Plotting the graph with the 95% confidence and prediction intervals
tn=data.frame(t=seq(1992,2002))
pred=predict(lm(female_ts~t+I(t^2)), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(lm(female_ts~t+I(t^2)),tn, level =0.95, interval="prediction")
pred.clim = predict(lm(female_ts~t+I(t^2)), tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
acf(y1)
rm(list=ls(all=T))
data = read.csv("5.4.csv")
data$X = NULL
names(data)=c("data_AMEX", "AMEX", "data_SP500", "SP500")
attach(data)
AMEX_diff = diff(AMEX)
SP500_diff = diff(SP500)
#y1 = time series for AMEX and y2 = time series for SP500
y1 = ts(AMEX_diff, start=1995+(249/252), freq = 252)
y2 = ts(SP500_diff, start = 1990+(13/252), freq = 252)
#need to get rid of the NA's in the y1 and y2 data
y1 = y1[complete.cases(y1)]
y2 = y2[complete.cases(y2)]
acf(y1)
pacf(y1)
acf(y2)
pacf(y2)
for (i in 1:20){
print(Box.test(y1, lag = i, type = "Ljung-Box"))
}
for (i in 1:20){
print(Box.test(y2, lag = i, type = "Ljung-Box"))
}
x <- c(-1.2, -0.8, 0, 0.5, 1.1, 2.9)
ceil(x)
x <- c(-1.2, -0.8, 0, 0.5, 1.1, 2.9)
ceiling(x)
rm(list=ls(all=T))
data = read.csv("4.4.csv")
names(data) = c("time", "house_price", "interest_rate")
attach(data)
hp_lag1 = append(NA, house_price[-length(house_price)])
hp_lag2 = append(c(NA, NA), house_price[-c(length(house_price)-1, length(house_price))])
hp_lag3 = append(c(NA,NA,NA), house_price[-c(length(house_price)-2, length(house_price)-1, length(house_price))])
hp_lag4 = append(c(NA,NA,NA,NA), house_price[-c(length(house_price)-3, length(house_price)-2, length(house_price)-1, length(house_price))])
house_price_ts = ts(house_price, start=1980+(1/4), freq=4)
hp_lag1k = append(NA, house_price_ts[-length(house_price_ts)])
hp_lag2k = append(c(NA, NA), house_price_ts[-c(length(house_price_ts)-1, length(house_price_ts))])
hp_lag1 = append(NA, house_price[-length(house_price)])
hp_lag2 = append(c(NA, NA), house_price[-c(length(house_price)-1, length(house_price))])
hp_lag3 = append(c(NA,NA,NA), house_price[-c(length(house_price)-2, length(house_price)-1, length(house_price))])
hp_lag4 = append(c(NA,NA,NA,NA), house_price[-c(length(house_price)-3, length(house_price)-2, length(house_price)-1, length(house_price))])
house_price_ts = ts(house_price, start=1980+(1/4), freq=4)
hp_lag1k = append(NA, house_price_ts[-length(house_price_ts)])
hp_lag2k = append(c(NA, NA), house_price_ts[-c(length(house_price_ts)-1, length(house_price_ts))])
length(house_price)
init_no_of_observ = ceiling(2/3*length(house_price))
init_no_of_observ
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price(1:init_no_of_observ+i)~hp_lag1(1:init_no_of_observ+i)
+hp_lag2(1:init_no_of_observ+i)+hp_lag3(1:init_no_of_observ+i)+
hp_lag4(1:init_no_of_observ+i))
forcasted_val = predict(reg_ts, 1)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price(1:init_no_of_observ+i)~hp_lag1(1:init_no_of_observ+i)
+hp_lag2(1:init_no_of_observ+i)+hp_lag3(1:init_no_of_observ+i)+
hp_lag4(1:init_no_of_observ+i))
forcasted_val = predict(reg_ts, 1)
}
rm(list=ls(all=T))
data = read.csv("4.4.csv")
names(data) = c("time", "house_price", "interest_rate")
attach(data)
hp_lag1 = append(NA, house_price[-length(house_price)])
hp_lag2 = append(c(NA, NA), house_price[-c(length(house_price)-1, length(house_price))])
hp_lag3 = append(c(NA,NA,NA), house_price[-c(length(house_price)-2, length(house_price)-1, length(house_price))])
hp_lag4 = append(c(NA,NA,NA,NA), house_price[-c(length(house_price)-3, length(house_price)-2, length(house_price)-1, length(house_price))])
house_price_ts = ts(house_price, start=1980+(1/4), freq=4)
hp_lag1k = append(NA, house_price_ts[-length(house_price_ts)])
hp_lag2k = append(c(NA, NA), house_price_ts[-c(length(house_price_ts)-1, length(house_price_ts))])
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price(1:init_no_of_observ+i)~hp_lag1(1:init_no_of_observ+i)
+hp_lag2(1:init_no_of_observ+i)+hp_lag3(1:init_no_of_observ+i)+
hp_lag4(1:init_no_of_observ+i))
forcasted_val = predict(reg_ts, 1)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price[1:init_no_of_observ+i]~hp_lag1[1:init_no_of_observ+i]
+hp_lag2[1:init_no_of_observ+i]+hp_lag3[1:init_no_of_observ+i]+
hp_lag4[1:init_no_of_observ+i])
forcasted_val = predict(reg_ts, 1)
}
forecasted_val
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price[1:init_no_of_observ+i]~hp_lag1[1:init_no_of_observ+i]
+hp_lag2[1:init_no_of_observ+i]+hp_lag3[1:init_no_of_observ+i]+
hp_lag4[1:init_no_of_observ+i])
forcasted_val = predict(reg_ts, 1)
print(forecasted_val)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 1:ceiling(1/3*length(house_price))){
reg_ts = lm(house_price[1:init_no_of_observ+i]~hp_lag1[1:init_no_of_observ+i]
+hp_lag2[1:init_no_of_observ+i]+hp_lag3[1:init_no_of_observ+i]+
hp_lag4[1:init_no_of_observ+i])
forecasted_val = predict(reg_ts, 1)
print(forecasted_val)
}
reg_ts = lm(house_price[1:init_no_of_observ+1]~hp_lag1[1:init_no_of_observ+1]
+hp_lag2[1:init_no_of_observ+1]+hp_lag3[1:init_no_of_observ+1]+
hp_lag4[1:init_no_of_observ+1])
forecasted_val = predict(reg_ts, 1)
print(forecasted_val)
reg_ts = lm(house_price[1:init_no_of_observ+1]~hp_lag1[1:init_no_of_observ+1]
+hp_lag2[1:init_no_of_observ+1]+hp_lag3[1:init_no_of_observ+1]+
hp_lag4[1:init_no_of_observ+1])
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
reg_ts = lm(house_price[1:init_no_of_observ+1]~hp_lag1[1:init_no_of_observ+1]
+hp_lag2[1:init_no_of_observ+1]+hp_lag3[1:init_no_of_observ+1]+
hp_lag4[1:init_no_of_observ+1])
forecasted_val = forecast(reg_ts, h=1)
print(forecasted_val)
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+1, start=1980+(1/4), freq=4])
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+1], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
}
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Homework/Hw 2")
setwd("/Users/Lenovo/Desktop/Econ 144/Homework/Hw 2")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
library(xtable)
library(stats)
#reading in the data and change the names
z=read.table("labordata.dat")
names(z)= c("male","female","total")
attach(z)
# Convert data to time series format:
male_ts<-ts(male,start=1948,freq=12)
female_ts <- ts(female,start=1948,freq=12)
total_ts <- ts(total,start=1948,freq=12)
t<-seq(1948, 1991,length=length(male_ts))
matplot(t, cbind(male_ts, female_ts, total_ts), xlab = "Time", ylab = "Values",  type="l", lwd=2, col = c("black", "blue", "red"))
title(main = "Time series values against time")
legend("topleft", legend=c("Female", "Total", "Male"),
col=c("blue", "red", "black"), cex=0.8, lty = 1)
rm(list=ls(all=T))
data = read.csv("4.4.csv")
names(data) = c("time", "house_price", "interest_rate")
attach(data)
hp_lag1 = append(NA, house_price[-length(house_price)])
hp_lag2 = append(c(NA, NA), house_price[-c(length(house_price)-1, length(house_price))])
hp_lag3 = append(c(NA,NA,NA), house_price[-c(length(house_price)-2, length(house_price)-1, length(house_price))])
hp_lag4 = append(c(NA,NA,NA,NA), house_price[-c(length(house_price)-3, length(house_price)-2, length(house_price)-1, length(house_price))])
house_price_ts = ts(house_price, start=1980+(1/4), freq=4)
hp_lag1k = append(NA, house_price_ts[-length(house_price_ts)])
hp_lag2k = append(c(NA, NA), house_price_ts[-c(length(house_price_ts)-1, length(house_price_ts))])
y1 = lm(house_price~hp_lag1)
summary(y1)
y2 = lm(house_price~hp_lag1+hp_lag2)
summary(y2)
y3 = lm(house_price~hp_lag1+hp_lag2+hp_lag3)
summary(y3)
y4 = lm(house_price~hp_lag1+hp_lag2+hp_lag3+hp_lag4)
summary(y4)
y5 = lm(house_price_ts~hp_lag1k+hp_lag2k)
summary(y5)
hp_lag1 = append(NA, house_price[-length(house_price)])
hp_lag2 = append(c(NA, NA), house_price[-c(length(house_price)-1, length(house_price))])
hp_lag3 = append(c(NA,NA,NA), house_price[-c(length(house_price)-2, length(house_price)-1, length(house_price))])
hp_lag4 = append(c(NA,NA,NA,NA), house_price[-c(length(house_price)-3, length(house_price)-2, length(house_price)-1, length(house_price))])
house_price_ts = ts(house_price, start=1980+(1/4), freq=4)
hp_lag1k = append(NA, house_price_ts[-length(house_price_ts)])
hp_lag2k = append(c(NA, NA), house_price_ts[-c(length(house_price_ts)-1, length(house_price_ts))])
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+1], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+i], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
}
reg_ts
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+i], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
reg_ts = append(reg_ts, forecasted_val$fitted.values)
print(forecasted_val)
}
forecasted_val$fitted.values
forecasted_val$fitted
forecasted_val = forecast(reg_ts, 1)
forecasted_val
forecasted_val$x
forecasted_val$mean
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:ceiling(1/3*length(house_price))){
reg_ts = ts(house_price[1:init_no_of_observ+i], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
reg_ts = append(reg_ts, forecasted_val$mean)
print(forecasted_val)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:2){
reg_ts = ts(house_price[1:init_no_of_observ+i], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
reg_ts = append(reg_ts, forecasted_val$mean)
print(forecasted_val)
print(reg_ts)
}
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:2){
reg_ts = ts(house_price[1:init_no_of_observ+i], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
reg_ts = ts.union(reg_ts, forecasted_val$mean)
print(forecasted_val)
print(reg_ts)
}
type(reg_ts)
typeof(reg_ts)
typeof(forecasted_val)
typeof(forecasted_val$mean)
init_no_of_observ = ceiling(2/3*length(house_price))
for (i in 0:2){
if (i == 0){
reg_ts = ts(house_price[1:init_no_of_observ], start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}else{
reg_ts = ts(append(house_price[1:init_no_of_observ+i], forecasted_val$mean), start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}
}
init_no_of_observ = ceiling(2/3*length(house_price))
house_price_used = house_price[1:init_no_of_observ]
for (i in 0:2){
if (i == 0){
reg_ts = ts(house_price_used , start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}else{
house_price_used = append(house_price_used, forecasted_val$mean)
reg_ts = ts(house_price_used, start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}
}
init_no_of_observ = ceiling(2/3*length(house_price))
house_price_used = house_price[1:init_no_of_observ]
for (i in 0:ceiling(1/3*length(house_price))){
if (i == 0){
reg_ts = ts(house_price_used , start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}else{
house_price_used = append(house_price_used, forecasted_val$mean)
reg_ts = ts(house_price_used, start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
print(forecasted_val)
print(reg_ts)
}
}
init_no_of_observ = ceiling(2/3*length(house_price))
house_price_used = house_price[1:init_no_of_observ]
for (i in 0:ceiling(1/3*length(house_price))){
if (i == 0){
reg_ts = ts(house_price_used , start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
}else{
house_price_used = append(house_price_used, forecasted_val$mean)
reg_ts = ts(house_price_used, start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
}
}
length(reg_ts)
View(data)
t = seq(start = 1980+(1/4), end = 2011 + (3/4), length(reg_ts))
matplot(t, cbind(reg_ts, house_price_ts))
t = seq(from = 1980+(1/4), to = 2011 + (3/4), length = length(reg_ts))
matplot(t, cbind(reg_ts, house_price_ts))
house_price_used
house_price_ts
init_no_of_observ = ceiling(2/3*length(house_price))
house_price_used = house_price[1:init_no_of_observ]
for (i in 0:ceiling(1/3*length(house_price))){
if (i == 0){
house_price_used_ts = ts(house_price_used , start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
}else{
house_price_used = append(house_price_used, forecasted_val$mean)
house_price_used_ts = ts(house_price_used, start=1980+(1/4), freq=4)
forecasted_val = forecast(reg_ts, 1)
}
}
