library("forecast")
#install.packages("astsa")
#require(astsa)
library(fpp)
library(strucchange)
library(tseries)
library(rugarch)
#Clear the previous environment
rm(list = ls(all=T))
library(fGarch)
# model=ugarchspec(
# variance.model = list(model = "sGARCH", garchOrder = c(2, 2)),
# mean.model = list(armaOrder = c(2, 2), include.mean = TRUE),
# distribution.model = "sstd")
#
# #Sanity check: explore the model parameters
# #mxreg is the number of external regressors
# model@model$pars
#Crete the low and high persistence GARCH simulations
lowPer = garchSim(spec = garchSpec(model = list(alpha = 0.2, beta = 0.3)), n = 1000, n.start = 100, extended = TRUE)
highPer = garchSim(spec = garchSpec(model = list(alpha = 0.1, beta = 0.88)), n = 1000, n.start = 100, extended = TRUE)
#plotting the scatterplots and histograms of the low and persistence simulations
plot(lowPer$garch, main = "Plot of low persistence time series", xlab = "Values")
plot(lowPer$sigma^2, main = "Plot of low persistence conditional variance", xlab = "Values")
plot(highPer$garch, main = "Plot of high persistence time series", xlab = "Values")
plot(highPer$sigma^2, main = "Plot of high persistence conditional variance", xlab = "Values")
hist(lowPer$garch, main = "Histogram of low persistence time series")
hist(lowPer$garch/lowPer$sigma, main = "Histogram of low persistence standardized time series")
hist(highPer$garch, main = "Histogram of high persistence time series")
hist(highPer$eps/highPer$sigma, main = "Histogram of high persistence standardized time series")
tsdisplay(lowPer$garch, main = "ACF and PACF of the low persistence time series")
tsdisplay(lowPer$garch^2, main = "ACF and PACF of the low persistence squared time series")
tsdisplay(lowPer$garch/lowPer$sigma, main = "ACF and PACF of the low persistence standardized time series")
tsdisplay((lowPer$garch/lowPer$sigma)^2, main = "ACF and PACF of the low persistence standardized squared time series")
tsdisplay(highPer$garch, main = "ACF and PACF of the high persistence time series")
tsdisplay(highPer$garch^2, main = "ACF and PACF of the high persistence squared time series")
tsdisplay(highPer$garch/highPer$sigma, main = "ACF and PACF of the high persistence standardized time series")
tsdisplay((highPer$garch/highPer$sigma)^2, main = "ACF and PACF of the high persistence standardized squared time series")
#Clear the pervious environment and download the SP500 data
library(openxlsx)
rm(list = ls(all=T))
data = read.xlsx("Chapter14_exercises_data.xlsx", sheet = "Exercise 3, 4, 10")
close_ts = ts(data$Close, start = 2000, freq = 252)
plot(volatility(close_ts, n = 10, calc = "close", N = 252, mean0 = FALSE), ylab = "Values", main = "Plot of volatility of SP500")
close_returns_ts = diff(log(close_ts))
tsdisplay(close_returns_ts, main = "Plot of the returns and its ACF and PACF")
tsdisplay(close_returns_ts^2, main = "Plot of the squared returns and its ACF and PACF")
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(14, 0)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model@model$pars
# Fit the model to the data
modelfit=ugarchfit(spec=model,data=close_returns_ts)
modelfit
plot(modelfit)
model1=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(2, 1)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model1@model$pars
# Fit the model to the data
modelfit1=ugarchfit(spec=model1,data=close_returns_ts)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 5")
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(fpp)
library(strucchange)
library(tseries)
library(rugarch)
#Clear the previous environment
rm(list = ls(all=T))
library(fGarch)
# model=ugarchspec(
# variance.model = list(model = "sGARCH", garchOrder = c(2, 2)),
# mean.model = list(armaOrder = c(2, 2), include.mean = TRUE),
# distribution.model = "sstd")
#
# #Sanity check: explore the model parameters
# #mxreg is the number of external regressors
# model@model$pars
#Crete the low and high persistence GARCH simulations
lowPer = garchSim(spec = garchSpec(model = list(alpha = 0.2, beta = 0.3)), n = 1000, n.start = 100, extended = TRUE)
highPer = garchSim(spec = garchSpec(model = list(alpha = 0.1, beta = 0.88)), n = 1000, n.start = 100, extended = TRUE)
#plotting the scatterplots and histograms of the low and persistence simulations
plot(lowPer$garch, main = "Plot of low persistence time series", xlab = "Values")
plot(lowPer$sigma^2, main = "Plot of low persistence conditional variance", xlab = "Values")
plot(highPer$garch, main = "Plot of high persistence time series", xlab = "Values")
plot(highPer$sigma^2, main = "Plot of high persistence conditional variance", xlab = "Values")
hist(lowPer$garch, main = "Histogram of low persistence time series")
hist(lowPer$garch/lowPer$sigma, main = "Histogram of low persistence standardized time series")
hist(highPer$garch, main = "Histogram of high persistence time series")
hist(highPer$eps/highPer$sigma, main = "Histogram of high persistence standardized time series")
tsdisplay(lowPer$garch, main = "ACF and PACF of the low persistence time series")
tsdisplay(lowPer$garch^2, main = "ACF and PACF of the low persistence squared time series")
tsdisplay(lowPer$garch/lowPer$sigma, main = "ACF and PACF of the low persistence standardized time series")
tsdisplay((lowPer$garch/lowPer$sigma)^2, main = "ACF and PACF of the low persistence standardized squared time series")
tsdisplay(highPer$garch, main = "ACF and PACF of the high persistence time series")
tsdisplay(highPer$garch^2, main = "ACF and PACF of the high persistence squared time series")
tsdisplay(highPer$garch/highPer$sigma, main = "ACF and PACF of the high persistence standardized time series")
tsdisplay((highPer$garch/highPer$sigma)^2, main = "ACF and PACF of the high persistence standardized squared time series")
#Clear the pervious environment and download the SP500 data
library(openxlsx)
rm(list = ls(all=T))
data = read.xlsx("Chapter14_exercises_data.xlsx", sheet = "Exercise 3, 4, 10")
close_ts = ts(data$Close, start = 2000, freq = 252)
plot(volatility(close_ts, n = 10, calc = "close", N = 252, mean0 = FALSE), ylab = "Values", main = "Plot of volatility of SP500")
close_returns_ts = diff(log(close_ts))
tsdisplay(close_returns_ts, main = "Plot of the returns and its ACF and PACF")
tsdisplay(close_returns_ts^2, main = "Plot of the squared returns and its ACF and PACF")
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(14, 0)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model@model$pars
# Fit the model to the data
modelfit=ugarchfit(spec=model,data=close_returns_ts)
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
model1=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(2, 1)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model1@model$pars
# Fit the model to the data
modelfit1=ugarchfit(spec=model1,data=close_returns_ts)
modelfit1
plot(modelfit1, which = 10)
plot(modelfit1, which = 11)
modelfor = ugarchforecast(modelfit1, data = NULL, n.ahead = 2, n.roll = 0, out.sample = 0)
print("Volatility forecast")
modelfor@forecast$sigmaFor
low95 = modelfor@forecast$seriesFor - 1.96*modelfor@forecast$sigmaFor
high95 = modelfor@forecast$seriesFor + 1.96*modelfor@forecast$sigmaFor
forecasted_values = data.frame(low95, modelfor@forecast$seriesFor ,high95)
colnames(forecasted_values) = c("Low95", "Forecasted value", "High95")
print("Returns forecast")
forecasted_values
#clear previous environment and obtain NYSE closing price
library(quantmod)
rm(list = ls(all=T))
getSymbols("NYA")
NYSE_returns_ts = diff(log(NYA$NYA.Close[complete.cases(NYA$NYA.Close)]))
NYSE_returns_ts = NYSE_returns_ts[complete.cases(NYSE_returns_ts)]
armodel = ar(NYSE_returns_ts)
summary(armodel)
armodel
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "sstd")
# Fit the model to the data
modelfit=ugarchfit(spec=model,data=residuals(armodel)[complete.cases(residuals(armodel))])
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
distribution.model = "sstd")
# Fit the model to the data
modelfit=ugarchfit(spec=model,data= NYSE_returns_ts)
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
#Fit an AR(5) model
ar5 = ar(NYSE_returns_ts, order.max = 5, aic = FALSE)
# Standard deviation of the spread
plot(sqrt(252) * runSD(fitted(ar5)[complete.cases(fitted(ar5))], 10), main = "Volatility from the fitted AR(5) model's fitted values", ylab = "Values")
esModel = ets(NYSE_returns_ts)
plot(sqrt(252) * runSD(fitted(esModel)[complete.cases(fitted(esModel))], 10), main = "Volatility from the exponentional smoothing model's fitted values", ylab = "Values")
plot(sqrt(252) * runSD(fitted(modelfit)[complete.cases(fitted(modelfit))], 10), main = "Volatility from the GARCH model's fitted values", ylab = "Values")
rm(list = ls(all=T))
y = garchSim(spec = garchSpec(model = list(mu = 76, omega = 3, alpha = 0.6, beta = 0)), n = 1000, n.start = 100, extended = TRUE)
forecasted_values = forecast(y$sigma, h = 10)
forecasted_values$mean
rm(list = ls(all=T))
#if y_t = 96
eps_t = 26
sigsqr1 = 3 + 0.6(eps_t)^2
rm(list = ls(all=T))
#if y_t = 96
eps_t = 26
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr[1] sigsqr1
rm(list = ls(all=T))
#if y_t = 96
eps_t = 26
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr[1] = sigsqr1
rm(list = ls(all=T))
#if y_t = 96
eps_t = 26
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
for (i in 2:20){
sigsqr[i] = 3 + 0.6(sigsqr[i-1])^2
}
rm(list = ls(all=T))
#if y_t = 96
eps_t = 26
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
for (i in 2:20){
sigsqr[i] = 3 + 0.6*(sigsqr[i-1])^2
}
View(sigsqr)
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*(sigsqr[i-1])^2
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*(sigsqr[1])^2
alpha = 0.6
for (i in 3:10){
sigsqr[i] = 0.6^(i-1)*(sigsqr[i-1])^2
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
View(sigsqr)
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:10){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:10){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
sigsqr
sig = (80-76)/1.645
sig = (80-76)/1.645
sig
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:10){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
print("The forecast of the conditional variance")
sigsqr
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:20){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
print("The forecast of the conditional variance")
sigsqr
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:100){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
print("The forecast of the conditional variance")
sigsqr
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:100){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
print("The forecast of the conditional variance")
sigsqr[1:10]
sig = (80-76)/1.645
print("The required conditional variance")
sig
print ("The forecast of the conditional variance for the next 100 days")
sigsqr
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Xiang/OneDrive/Desktop/Econ-144/Homework/Hw 5")
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(fpp)
library(strucchange)
library(tseries)
library(rugarch)
#Clear the previous environment
rm(list = ls(all=T))
library(fGarch)
# model=ugarchspec(
# variance.model = list(model = "sGARCH", garchOrder = c(2, 2)),
# mean.model = list(armaOrder = c(2, 2), include.mean = TRUE),
# distribution.model = "sstd")
#
# #Sanity check: explore the model parameters
# #mxreg is the number of external regressors
# model@model$pars
#Crete the low and high persistence GARCH simulations
lowPer = garchSim(spec = garchSpec(model = list(alpha = 0.2, beta = 0.3)), n = 1000, n.start = 100, extended = TRUE)
highPer = garchSim(spec = garchSpec(model = list(alpha = 0.1, beta = 0.88)), n = 1000, n.start = 100, extended = TRUE)
#plotting the scatterplots and histograms of the low and persistence simulations
plot(lowPer$garch, main = "Plot of low persistence time series", xlab = "Values")
plot(lowPer$sigma^2, main = "Plot of low persistence conditional variance", xlab = "Values")
plot(highPer$garch, main = "Plot of high persistence time series", xlab = "Values")
plot(highPer$sigma^2, main = "Plot of high persistence conditional variance", xlab = "Values")
hist(lowPer$garch, main = "Histogram of low persistence time series")
hist(lowPer$garch/lowPer$sigma, main = "Histogram of low persistence standardized time series")
hist(highPer$garch, main = "Histogram of high persistence time series")
hist(highPer$eps/highPer$sigma, main = "Histogram of high persistence standardized time series")
tsdisplay(lowPer$garch, main = "ACF and PACF of the low persistence time series")
tsdisplay(lowPer$garch^2, main = "ACF and PACF of the low persistence squared time series")
tsdisplay(lowPer$garch/lowPer$sigma, main = "ACF and PACF of the low persistence standardized time series")
tsdisplay((lowPer$garch/lowPer$sigma)^2, main = "ACF and PACF of the low persistence standardized squared time series")
tsdisplay(highPer$garch, main = "ACF and PACF of the high persistence time series")
tsdisplay(highPer$garch^2, main = "ACF and PACF of the high persistence squared time series")
tsdisplay(highPer$garch/highPer$sigma, main = "ACF and PACF of the high persistence standardized time series")
tsdisplay((highPer$garch/highPer$sigma)^2, main = "ACF and PACF of the high persistence standardized squared time series")
#Clear the pervious environment and download the SP500 data
library(openxlsx)
rm(list = ls(all=T))
data = read.xlsx("Chapter14_exercises_data.xlsx", sheet = "Exercise 3, 4, 10")
close_ts = ts(data$Close, start = 2000, freq = 252)
plot(volatility(close_ts, n = 10, calc = "close", N = 252, mean0 = FALSE), ylab = "Values", main = "Plot of volatility of SP500")
close_returns_ts = diff(log(close_ts))
tsdisplay(close_returns_ts, main = "Plot of the returns and its ACF and PACF")
tsdisplay(close_returns_ts^2, main = "Plot of the squared returns and its ACF and PACF")
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(14, 0)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model@model$pars
# Fit the model to the data
modelfit=ugarchfit(spec=model,data=close_returns_ts)
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
model1=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(2, 1)),
mean.model = list(armaOrder = c(1, 2), include.mean = TRUE),
distribution.model = "sstd")
#Sanity check: explore the model parameters
model1@model$pars
# Fit the model to the data
modelfit1=ugarchfit(spec=model1,data=close_returns_ts)
modelfit1
plot(modelfit1, which = 10)
plot(modelfit1, which = 11)
modelfor = ugarchforecast(modelfit1, data = NULL, n.ahead = 2, n.roll = 0, out.sample = 0)
print("Volatility forecast")
modelfor@forecast$sigmaFor
low95 = modelfor@forecast$seriesFor - 1.96*modelfor@forecast$sigmaFor
high95 = modelfor@forecast$seriesFor + 1.96*modelfor@forecast$sigmaFor
forecasted_values = data.frame(low95, modelfor@forecast$seriesFor ,high95)
colnames(forecasted_values) = c("Low95", "Forecasted value", "High95")
print("Returns forecast")
forecasted_values
#clear previous environment and obtain NYSE closing price
library(quantmod)
rm(list = ls(all=T))
getSymbols("NYA")
NYSE_returns_ts = diff(log(NYA$NYA.Close[complete.cases(NYA$NYA.Close)]))
NYSE_returns_ts = NYSE_returns_ts[complete.cases(NYSE_returns_ts)]
armodel = ar(NYSE_returns_ts)
summary(armodel)
armodel
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "sstd")
# Fit the model to the data
modelfit=ugarchfit(spec=model,data=residuals(armodel)[complete.cases(residuals(armodel))])
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
model=ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
distribution.model = "sstd")
# Fit the model to the data
modelfit=ugarchfit(spec=model,data= NYSE_returns_ts)
modelfit
plot(modelfit, which = 10)
plot(modelfit, which = 11)
#Fit an AR(5) model
ar5 = ar(NYSE_returns_ts, order.max = 5, aic = FALSE)
# Standard deviation of the spread
plot(sqrt(252) * runSD(fitted(ar5)[complete.cases(fitted(ar5))], 10), main = "Volatility from the fitted AR(5) model's fitted values", ylab = "Values")
esModel = ets(NYSE_returns_ts)
plot(sqrt(252) * runSD(fitted(esModel)[complete.cases(fitted(esModel))], 10), main = "Volatility from the exponentional smoothing model's fitted values", ylab = "Values")
plot(sqrt(252) * runSD(fitted(modelfit)[complete.cases(fitted(modelfit))], 10), main = "Volatility from the GARCH model's fitted values", ylab = "Values")
rm(list = ls(all=T))
#if y_t = 92
eps_t = 92-76
sigsqr1 = 3 + 0.6*(eps_t)^2
sigsqr = vector()
sigsqr[1] = sigsqr1
sigsqr[2] = 3 + 0.6*sigsqr[1]
alpha = 0.6
for (i in 3:100){
sigsqr[i] = 0.6^(i-1)*sigsqr[i-1]
for (j in 0:i-2){
sigsqr[i] = sigsqr[i] + alpha^j
}
}
print("The forecast of the conditional variance for the next 10 days")
sigsqr[1:10]
sig = (80-76)/1.645
print("The required conditional variance")
sig
print ("The forecast of the conditional variance for the next 100 days")
sigsqr
